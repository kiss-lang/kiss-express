(defReaderMacro "<#" [stream]
    `(js.Browser.document.getElementById ,(stream.expect "an element id" ->(stream.takeUntilAndDrop ">"))))

(defReaderMacro "<." [stream]
    `(js.Browser.document.getElementsByClassName ,(stream.expect "a class name" ->(stream.takeUntilAndDrop ">"))))

(defReaderMacro "<" [stream &builder b]
    (case (stream.expect "next character" ->(stream.peekChars 1))
        // less-than:
        (" "
            (b.symbol "<"))
        // elements by tag name:
        (otherwise
            `(js.Browser.document.getElementsByTagName ,(stream.expect "a tag name" ->(stream.takeUntilAndDrop ">"))))))

(function p [text &opt id]
    (let [pElement (js.Browser.document.createElement "p")]
        (set pElement.innerHTML text)
        (when id (set pElement.id id))
        pElement))

(defMacro reloadOnFocus []
    (let [blurred (symbol)]
        `{
            (var &mut ,blurred false)
            (js.Browser.window.addEventListener "blur" ->{
                (set ,blurred true)
            })
            (js.Browser.window.addEventListener "focus" ->{
                (when ,blurred
                    (js.Browser.location.reload))
                (set ,blurred false)
            })
        }))

(function getTimeZone []
    .timeZone (.resolvedOptions (new js.lib.intl.DateTimeFormat)))

// Format the given date's day in the current timezone (default to current time)
(function localDateString [&opt :Date date :String timeZone]
    (default date (Date.now))
    (default timeZone (getTimeZone))
    (let [jsDate (js.lib.Date.fromHaxeDate date)]
        (jsDate.toLocaleDateString [] (objectWith timeZone))))

// Format the given date's day in the given timezone (default to current time & time zone)
(function localTimeString [&opt :Date date :String timeZone]
    (default date (Date.now))
    (default timeZone (getTimeZone))
    (let [jsDate (js.lib.Date.fromHaxeDate date)]
        (jsDate.toLocaleTimeString [] (objectWith timeZone))))
