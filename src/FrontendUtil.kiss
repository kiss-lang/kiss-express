(defReaderMacro "<#" [stream]
    `(js.Browser.document.getElementById ,(stream.expect "an element id" ->(stream.takeUntilAndDrop ">"))))

(defReaderMacro "<." [stream]
    `(js.Browser.document.getElementsByClassName ,(stream.expect "a class name" ->(stream.takeUntilAndDrop ">"))))

(defReaderMacro "<" [stream &builder b]
    (case (stream.expect "next character" ->(stream.peekChars 1))
        // less-than:
        (" "
            (b.symbol "<"))
        // elements by tag name:
        (otherwise
            `(js.Browser.document.getElementsByTagName ,(stream.expect "a tag name" ->(stream.takeUntilAndDrop ">"))))))

(function p [text &opt id]
    (let [pElement (js.Browser.document.createElement "p")]
        (set pElement.innerHTML text)
        (when id (set pElement.id id))
        pElement))

(defMacro reloadOnFocus []
    (let [blurred (symbol)]
        `{
            (var &mut ,blurred false)
            (js.Browser.window.addEventListener "blur"
                ->e
                    (when (= e.target js.Browser.window)
                        (set ,blurred true)))
            (js.Browser.window.addEventListener "focus"
                ->e
                    (when (= js.Browser.window.document.activeElement js.Browser.window.document.body)
                        (when ,blurred
                            (js.Browser.location.reload))
                        (set ,blurred false)))
        }))

(function getTimeZone []
    .timeZone (.resolvedOptions (new js.lib.intl.DateTimeFormat)))

(function :String _localDateString [:Bool dateString &opt :Date date :String dateStyle :String timeStyle :String timeZone]
    (default date (Date.now))
    (default dateStyle "short")
    (default timeStyle dateStyle)
    (default timeZone (getTimeZone))
    (let [jsDate (js.lib.Date.fromHaxeDate date)
            :Dynamic options
                (if dateString
                        (objectWith dateStyle timeZone)
                    (objectWith timeStyle timeZone))]
        (if dateString
                (jsDate.toLocaleDateString [] options)
            (jsDate.toLocaleTimeString [] options))))

// Format the given Date's day in the given timezone (default to current today's date)
(var :haxe.Constraints.Function localDateString (_localDateString.bind true))
// Format the given Date's time in the given timezone (default to current time & time zone)
(var :haxe.Constraints.Function localTimeString (_localDateString.bind false))