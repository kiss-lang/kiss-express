(var &mut pageName "")
(var &mut desc "")

(import sqlite3.Database)
(import node.Crypto)
(importAs passport_local.Strategy LocalStrategy)
(import js.Node)

(var :Array<Dynamic->Void> onLogoutEvents [])

(defMacro onLogout [req &body body]
    `(onLogoutEvents.push (lambda [,req] ,@body)))

(defMacro req_res_next [otherArgs &body body]
    `(lambda [:Dynamic req :Dynamic res :Dynamic next ,@otherArgs]
        ,@body))

(defMacro kissExpress [app idealPorts &rest body]
    (let [kissExpressFile "$(userHome)/.kiss-express.json"
            kissExpressDbFile "$(userHome)/.kiss-express.db"]
        `{
            (savedVarFile ,kissExpressFile)
            (savedVar :Map<String,Int> takenPorts (new Map))

            (awaitLet [&sync pkg (js.Lib.require "../package.json")
                            getPort (js.Lib.dynamicImport "get-port")
                            port (takePort pkg.name getPort ,idealPorts)]
                (set pageName pkg.name)
                (set desc pkg.description)
                (let [db (new Database ,kissExpressDbFile)
                        SQLiteStore (ConnectSqlite3.call ExpressSession)
                        :Dynamic ,app (Express.call)
                        ,(symbol) (Multer.call)]
                    (.use ,app (Express.json))
                    (.use ,app (Express.urlencoded (object extended false)))
                    (db.serialize ->:Void {
                        (db.run
                            "CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT UNIQUE,
                                hashed_password BLOB,
                                salt BLOB,
                                name TEXT,
                                email TEXT UNIQUE,
                                email_verified INTEGER)"
                            (object))
                        (db.run
                            "CREATE TABLE IF NOT EXISTS federated_credentials (
                                id INTEGER PRIMARY KEY,
                                user_id INTEGER NOT NULL,
                                provider TEXT NOT NULL,
                                subject TEXT NOT NULL,
                                UNIQUE (provider, subject))"
                            (object))
                    })

                    (Passport.value.use
                        (new LocalStrategy ->[:Dynamic username :Dynamic password :Dynamic cb] {
                            (db.get
                                "SELECT * FROM users WHERE username = ?"
                                [ username ]
                                ->[:Dynamic err :Dynamic row] {
                                    (when err
                                        (return (cb err)))
                                    (unless row
                                        (return (cb null false (object message "Incorrect username or password."))))
    
                                    (Crypto.pbkdf2 password row.salt 310000 32 "sha256" ->[:Dynamic err :Dynamic hashedPassword] {
                                        (when err
                                            (return (cb err)))
                                        (unless (Crypto.timingSafeEqual row.hashed_password hashedPassword)
                                            (return (cb null false (object message "Incorrect username or password."))))
                                        
                                        (return (cb null row))
                                    })
                                })
                        }))

                    (Passport.value.serializeUser ->[:Dynamic user :Dynamic cb]
                        (Node.process.nextTick ->:Void
                            (cb null (object id user.id username user.username))))

                    (Passport.value.deserializeUser ->[:Dynamic user :Dynamic cb] 
                        (Node.process.nextTick ->:Void
                            (return (cb null user))))

                    (.use ,app 
                        (ExpressSession.call 
                            (object
                                secret "keyboard cat"
                                resave false
                                saveUninitialized false
                                store (js.Syntax.construct "SQLiteStore" (object db "sessions.db" dir (userHome))))))
                    (.use ,app (Passport.value.authenticate "session"))
                    (.post ,app "/login/password"
                        (Passport.value.authenticate
                            "local"
                            (object
                                successRedirect "/"
                                failureRedirect "/login"
                                failureMessage true)))

                    (.get ,app "/login"
                        (req_res_next []
                            (res.send
                                (wrapHTML req #"<r-c><h1>Sign in</h1>
                                    <form action="/login/password" method="post">
                                        <section>
                                            <label for="username">Username</label>
                                            <input id="username" name="username" type="text" autocomplete="username" required autofocus>
                                        </section>
                                        <section>
                                            <label for="current-password">Password</label>
                                            <input id="current-password" name="password" type="password" autocomplete="current-password" required>
                                        </section>
                                        <button type="submit">Sign in</button>
                                    </form></r-c>"#))))
                    (.post ,app "/logout" (req_res_next []
                        (doFor event onLogoutEvents
                            (event req))
                        (req.logout ->err {
                            (when err (return (next err)))
                            (res.redirect "/")
                        })))

                    (.get ,app "/signup" (req_res_next []
                        (res.send (wrapHTML req #"<r-c>
                            <h1>Sign up</h1>
                            <form action="/signup" method="post">
                                <section>
                                    <label for="username">Username</label>
                                    <input id="username" name="username" type="text" autocomplete="username" required>
                                </section>
                                <section>
                                    <label for="new-password">Password</label>
                                    <input id="new-password" name="password" type="password" autocomplete="new-password" required>
                                </section>
                                <button type="submit">Sign up</button>
                            </form></r-c>"#))))
                    (.post ,app "/signup" (req_res_next []
                        (let [:Dynamic salt (Crypto.randomBytes 16)]
                            (Crypto.pbkdf2 req.body.password salt 310000 32 "sha256" ->[err hashedPassword] {
                                (when err (return (next err)))
                                (db.run "INSERT INTO users (username, hashed_password, salt) VALUES (?, ?, ?)"
                                    (array Dynamic
                                        req.body.username
                                        hashedPassword
                                        salt)
                                    ->err {
                                        (when err (return (next err)))
                                        (let [user (object id (js.Syntax.code "this.lastID") username req.body.username)]
                                            (req.login user ->err {
                                                (when err (return (next err)))
                                                (res.redirect "/")
                                            }))
                                    })
                                }))))
                    ,@body
                    (#unless test
                        (.listen ,app port ->(print "$pageName listening at http://localhost:$port")))))
        }))

(defMacro userProp [typedDataName defaultValue &builder b]
    (let [innerT (typeName typedDataName)
            dataName (symbolNameValue typedDataName true)
            dataNameSymbol (b.symbol dataName)
            property (b.typed "Map<String,${innerT}>" dataNameSymbol)]
        `{
            (savedVar ,property (new Map))
            (function ,(b.typed innerT (b.symbol "get_user_${dataName}")) [req]
                (unless (.exists ,dataNameSymbol req.user?.username)
                    (when req.user?.username
                        (withMutProperties [,dataNameSymbol]
                            (dictSet ,dataNameSymbol req.user?.username ,defaultValue))))
                (dictGet ,dataNameSymbol req.user?.username))
            (function ,(b.typed innerT (b.symbol "set_user_${dataName}")) [v req]
                (when req.user?.username
                    (withMutProperties [,dataNameSymbol]
                        (dictSet ,dataNameSymbol req.user?.username v))
                    v))
        }))

(defMacro withUserProp [dataNameSymbol req &builder b &body body]
    (let [dataNameStr (symbolNameValue dataNameSymbol)
            getSymbol (symbol "get_user_${dataNameStr}")
            setSymbol (symbol "set_user_${dataNameStr}")
            resultSymbol (symbol)]
        `(let [&mut ,dataNameSymbol (,getSymbol ,req)
                ,resultSymbol {,@body}]
            (,setSymbol ,dataNameSymbol ,req)
            ,resultSymbol)))

(defMacroFunction _withUserProps [dataNameSymbols req &opt body]
    (let [l (Helpers.argList dataNameSymbols "withUserProps")]
        (if l
                `(withUserProp ,(first l) ,req
                    ,(_withUserProps (l.slice 1) req body))
            body)))

(defMacro withUserProps [dataNameSymbols req &body body]
    (_withUserProps dataNameSymbols req body))

(function takePort [name getPort idealPorts]
    (awaitLet [port
                (Reflect.callMethod getPort
                    (Reflect.field getPort "default")
                    [(object port idealPorts)])]
        (catch [e]
            (throw "Error from takePort(): $e"))
        (withMutProperties [takenPorts]
            // Overwrite saved port information from servers that aren't running now
            (doFor =>site _port takenPorts
                (when (= _port port)
                    (takenPorts.remove site)))
            (dictSet takenPorts name port))
        port))

(function kissExpressHeader [req]
    (+ "<header><r-c>"
        (let [runningSites (sort (collect (takenPorts.keys)))
                columnTag "c1-${runningSites.length}"]
        	
            (apply +
                (for site runningSites
                    (+ "<${columnTag}>"
                        (if (= site pageName) "<b>" "")
                        "<a href=\"/\" onclick=\"javascript:event.target.port=$(dictGet takenPorts site);\">${site}</a>"
                        (if (= site pageName) "</b>" "")
                        "</${columnTag}>")
                    )))
        #"</r-c>
        <r-c>
            <c1-1>
                <a class="button" href="/login">Sign in</a>
                <form action="/logout" method="post">"#
                    req.user?.username
                    #"<button type="submit">Sign out</button>
                </form>
                <a class="button" href="/signup">Sign up</a>
            </c1-1>
        </r-c></header>"#))

(var &mut css "")

(function wrapHTML [:Dynamic req :String html &opt :String title :String description :String language :String charSet]
	// Default title comes from package.json:
    (unless title (set title pageName))
    (unless description (set description desc))
    (unless language (set language "en"))
    (unless charSet (set charSet "utf-8"))
    (unless css
        (+= css (sys.io.File.getContent "css/r-c-min.css"))
        (+= css "\n")
        (+= css (sys.io.File.getContent "css/site-styles.css")))
	"
        <!DOCTYPE html>
        <html lang=\"${language}\">
        <head>
            <meta charset=\"${charSet}\" />
            <title>${title}</title>
            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
            <meta name=\"description\" content=\"${description}\" />

            <!-- Responsive Columns CSS -->
            <style>
            ${css}
            </style>
        </head>
        <body>
            $(kissExpressHeader req)
            ${html}
        </body>
        </html>
	"
    )